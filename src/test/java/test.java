import java.util.Locale;
import java.util.TimeZone;
import org.apache.commons.codec.binary.Base64;

/**
 * Description:
 * Author: Johnson CHEN
 * Date: 2014/9/26.
 */
public class test {
    static public void main(String[] args){
        //String s = null;
        //System.out.println(s.split("\\s")[0]);
        //java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        //sdf.setTimeZone(TimeZone.getTimeZone("GMT-7"));
        //System.out.println(sdf.format(new java.util.Date(Long.parseLong("1388559600") * 1000)));

        //String s2 = "";

        //String newString = new String(Base64.decodeBase64(s2.getBytes()));
        //System.out.println(newString);

        String[] sss = {"1","2","3"};
        System.out.println(sss[0]);
        System.out.println(sss[1]);
        System.out.println(sss[2]);
        System.out.println(sss.length);
        System.out.println("TXT,ST SFSF".matches("TXT,ST.*"));
    }
}
